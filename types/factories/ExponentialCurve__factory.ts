/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExponentialCurve,
  ExponentialCurveInterface,
} from "../ExponentialCurve";

const _abi = [
  {
    inputs: [],
    name: "MIN_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "spotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "delta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "numItems",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeeMultiplier",
        type: "uint256",
      },
    ],
    name: "getBuyInfo",
    outputs: [
      {
        internalType: "enum CurveErrorCodes.Error",
        name: "error",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "newSpotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "newDelta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "inputValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "spotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "delta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "numItems",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeeMultiplier",
        type: "uint256",
      },
    ],
    name: "getSellInfo",
    outputs: [
      {
        internalType: "enum CurveErrorCodes.Error",
        name: "error",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "newSpotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "newDelta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "outputValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "delta",
        type: "uint128",
      },
    ],
    name: "validateDelta",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "newSpotPrice",
        type: "uint128",
      },
    ],
    name: "validateSpotPrice",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610981806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063097cc63d1461005c5780630ae67ccc146100905780637ca542ac146100c0578063a1bbb2e8146100f4578063ad9f20a614610124575b600080fd5b6100766004803603810190610071919061068e565b610142565b60405161008795949392919061075c565b60405180910390f35b6100aa60048036038101906100a59190610665565b6102f5565b6040516100b79190610741565b60405180910390f35b6100da60048036038101906100d5919061068e565b61031b565b6040516100eb95949392919061075c565b60405180910390f35b61010e60048036038101906101099190610665565b6104fd565b60405161011b9190610741565b60405180910390f35b61012c610520565b60405161013991906107af565b60405180910390f35b600080600080600080881415610169576001600080600080945094509450945094506102e8565b600061019a8a6fffffffffffffffffffffffffffffffff16670de0b6b3a7640000806105289092919063ffffffff16565b905060006101bb8a670de0b6b3a7640000846105509092919063ffffffff16565b90506101ec81670de0b6b3a76400008e6fffffffffffffffffffffffffffffffff166106179092919063ffffffff16565b9550633b9aca00866fffffffffffffffffffffffffffffffff16101561021457633b9aca0095505b61028561025a83670de0b6b3a764000061022e9190610820565b670de0b6b3a764000084670de0b6b3a764000061024b9190610820565b6105289092919063ffffffff16565b670de0b6b3a76400008e6fffffffffffffffffffffffffffffffff166106179092919063ffffffff16565b93506102a488670de0b6b3a7640000866106179092919063ffffffff16565b92506102c389670de0b6b3a7640000866106179092919063ffffffff16565b846102ce9190610820565b935082846102dc9190610820565b93508a94506000965050505b9550955095509550959050565b6000670de0b6b3a7640000826fffffffffffffffffffffffffffffffff16119050919050565b600080600080600080881415610342576001600080600080945094509450945094506104f0565b600061037389670de0b6b3a76400008c6fffffffffffffffffffffffffffffffff166105509092919063ffffffff16565b905060006103a682670de0b6b3a76400008e6fffffffffffffffffffffffffffffffff166106179092919063ffffffff16565b90506fffffffffffffffffffffffffffffffff80168111156103db5760026000806000809650965096509650965050506104f0565b80955060006104218c6fffffffffffffffffffffffffffffffff16670de0b6b3a76400008f6fffffffffffffffffffffffffffffffff166106179092919063ffffffff16565b905061048c610473670de0b6b3a76400008e6fffffffffffffffffffffffffffffffff1661044f9190610820565b670de0b6b3a764000080876104649190610820565b6105289092919063ffffffff16565b670de0b6b3a7640000836106179092919063ffffffff16565b94506104ab89670de0b6b3a7640000876106179092919063ffffffff16565b93506104ca8a670de0b6b3a7640000876106179092919063ffffffff16565b856104d591906107ca565b945083856104e391906107ca565b94508b9550600097505050505b9550955095509550959050565b6000633b9aca00826fffffffffffffffffffffffffffffffff1610159050919050565b633b9aca0081565b6000818402905081848204148415178315151661054457600080fd5b82810490509392505050565b600083600081146105f757600284066000811461056f57859250610573565b8392505b508260011c8460011c94505b84156105f1578560801c1561059357600080fd5b858602818101818110156105a657600080fd5b858104975060028706156105e45787850285898204146105cc5788156105cb57600080fd5b5b838101818110156105dc57600080fd5b878104965050505b50508460011c945061057f565b5061060f565b8360008114610609576000925061060d565b8392505b505b509392505050565b60008284029050828482041484151761062f57600080fd5b81810490509392505050565b60008135905061064a8161091d565b92915050565b60008135905061065f81610934565b92915050565b60006020828403121561067757600080fd5b60006106858482850161063b565b91505092915050565b600080600080600060a086880312156106a657600080fd5b60006106b48882890161063b565b95505060206106c58882890161063b565b94505060406106d688828901610650565b93505060606106e788828901610650565b92505060806106f888828901610650565b9150509295509295909350565b61070e81610854565b82525050565b61071d81610899565b82525050565b61072c81610873565b82525050565b61073b8161088f565b82525050565b60006020820190506107566000830184610705565b92915050565b600060a0820190506107716000830188610714565b61077e6020830187610723565b61078b6040830186610723565b6107986060830185610732565b6107a56080830184610732565b9695505050505050565b60006020820190506107c46000830184610732565b92915050565b60006107d58261088f565b91506107e08361088f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610815576108146108ab565b5b828201905092915050565b600061082b8261088f565b91506108368361088f565b925082821015610849576108486108ab565b5b828203905092915050565b60008115159050919050565b600081905061086e82610909565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108a482610860565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061091a576109196108da565b5b50565b61092681610873565b811461093157600080fd5b50565b61093d8161088f565b811461094857600080fd5b5056fea2646970667358221220c80fd7616b5a3674430369bf8eb70ff0383c46d13b2e41111784e54f0329a86e64736f6c63430008040033";

export class ExponentialCurve__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExponentialCurve> {
    return super.deploy(overrides || {}) as Promise<ExponentialCurve>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExponentialCurve {
    return super.attach(address) as ExponentialCurve;
  }
  connect(signer: Signer): ExponentialCurve__factory {
    return super.connect(signer) as ExponentialCurve__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExponentialCurveInterface {
    return new utils.Interface(_abi) as ExponentialCurveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExponentialCurve {
    return new Contract(address, _abi, signerOrProvider) as ExponentialCurve;
  }
}
