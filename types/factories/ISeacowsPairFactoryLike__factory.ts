/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  ISeacowsPairFactoryLike,
  ISeacowsPairFactoryLikeInterface,
} from "../ISeacowsPairFactoryLike";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "callAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISeacowsPairERC20",
        name: "pair",
        type: "address",
      },
      {
        internalType: "contract ERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "contract IERC721",
        name: "_nft",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_assetRecipient",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_delta",
        type: "uint128",
      },
      {
        internalType: "uint96",
        name: "_fee",
        type: "uint96",
      },
      {
        internalType: "uint128",
        name: "_spotPrice",
        type: "uint128",
      },
      {
        internalType: "uint256[]",
        name: "_initialNFTIDs",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_initialTokenBalance",
        type: "uint256",
      },
    ],
    name: "initializePairERC20FromOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISeacowsPairETH",
        name: "pair",
        type: "address",
      },
      {
        internalType: "contract IERC721",
        name: "_nft",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_assetRecipient",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_delta",
        type: "uint128",
      },
      {
        internalType: "uint96",
        name: "_fee",
        type: "uint96",
      },
      {
        internalType: "uint128",
        name: "_spotPrice",
        type: "uint128",
      },
      {
        internalType: "uint256[]",
        name: "_initialNFTIDs",
        type: "uint256[]",
      },
    ],
    name: "initializePairETHFromOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "potentialPair",
        type: "address",
      },
      {
        internalType: "enum ISeacowsPairFactoryLike.PairVariant",
        name: "variant",
        type: "uint8",
      },
    ],
    name: "isPair",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceOracleRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFeeMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFeeRecipient",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract SeacowsRouter",
        name: "router",
        type: "address",
      },
    ],
    name: "routerStatus",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "wasEverAllowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ISeacowsPairFactoryLike__factory {
  static readonly abi = _abi;
  static createInterface(): ISeacowsPairFactoryLikeInterface {
    return new utils.Interface(_abi) as ISeacowsPairFactoryLikeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISeacowsPairFactoryLike {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ISeacowsPairFactoryLike;
  }
}
