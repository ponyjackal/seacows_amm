/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LinearCurve, LinearCurveInterface } from "../LinearCurve";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "spotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "delta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "numItems",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeeMultiplier",
        type: "uint256",
      },
    ],
    name: "getBuyInfo",
    outputs: [
      {
        internalType: "enum CurveErrorCodes.Error",
        name: "error",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "newSpotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "newDelta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "inputValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "spotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "delta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "numItems",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeeMultiplier",
        type: "uint256",
      },
    ],
    name: "getSellInfo",
    outputs: [
      {
        internalType: "enum CurveErrorCodes.Error",
        name: "error",
        type: "uint8",
      },
      {
        internalType: "uint128",
        name: "newSpotPrice",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "newDelta",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "outputValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    name: "validateDelta",
    outputs: [
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    name: "validateSpotPrice",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108ec806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063097cc63d146100515780630ae67ccc146100855780637ca542ac146100b5578063a1bbb2e8146100e9575b600080fd5b61006b600480360381019061006691906104af565b610119565b60405161007c95949392919061057d565b60405180910390f35b61009f600480360381019061009a9190610486565b61029e565b6040516100ac9190610562565b60405180910390f35b6100cf60048036038101906100ca91906104af565b6102a9565b6040516100e095949392919061057d565b60405180910390f35b61010360048036038101906100fe9190610486565b61042d565b6040516101109190610562565b60405180910390f35b60008060008060008088141561014057600160008060008094509450945094509450610291565b6000888a6fffffffffffffffffffffffffffffffff1661016091906106ce565b9050808b6fffffffffffffffffffffffffffffffff1610156101b75760009450600060018b8d610190919061066c565b61019a91906105d0565b6fffffffffffffffffffffffffffffffff169050809950506101c6565b808b6101c39190610728565b94505b60028a6fffffffffffffffffffffffffffffffff1660018b6101e8919061075c565b8b6101f391906106ce565b6101fd91906106ce565b610207919061069d565b8b6fffffffffffffffffffffffffffffffff168a61022591906106ce565b61022f919061075c565b925061024e87670de0b6b3a7640000856104389092919063ffffffff16565b915061026d88670de0b6b3a7640000856104389092919063ffffffff16565b83610278919061075c565b92508183610286919061075c565b925089935060009550505b9550955095509550959050565b600060019050919050565b6000806000806000808814156102d057600160008060008094509450945094509450610420565b6000888a6fffffffffffffffffffffffffffffffff166102f091906106ce565b8b6fffffffffffffffffffffffffffffffff1661030d9190610616565b90506fffffffffffffffffffffffffffffffff80168111156103415760026000806000809550955095509550955050610420565b80945060008a8c61035291906105d0565b6fffffffffffffffffffffffffffffffff16905060028b6fffffffffffffffffffffffffffffffff1660018c610388919061075c565b8c61039391906106ce565b61039d91906106ce565b6103a7919061069d565b818b6103b391906106ce565b6103bd9190610616565b93506103dc88670de0b6b3a7640000866104389092919063ffffffff16565b92506103fb89670de0b6b3a7640000866104389092919063ffffffff16565b846104069190610616565b935082846104149190610616565b93508a94506000965050505b9550955095509550959050565b600060019050919050565b60008284029050828482041484151761045057600080fd5b81810490509392505050565b60008135905061046b81610888565b92915050565b6000813590506104808161089f565b92915050565b60006020828403121561049857600080fd5b60006104a68482850161045c565b91505092915050565b600080600080600060a086880312156104c757600080fd5b60006104d58882890161045c565b95505060206104e68882890161045c565b94505060406104f788828901610471565b935050606061050888828901610471565b925050608061051988828901610471565b9150509295509295909350565b61052f81610790565b82525050565b61053e816107d5565b82525050565b61054d816107af565b82525050565b61055c816107cb565b82525050565b60006020820190506105776000830184610526565b92915050565b600060a0820190506105926000830188610535565b61059f6020830187610544565b6105ac6040830186610544565b6105b96060830185610553565b6105c66080830184610553565b9695505050505050565b60006105db826107af565b91506105e6836107af565b9250826fffffffffffffffffffffffffffffffff0382111561060b5761060a6107e7565b5b828201905092915050565b6000610621826107cb565b915061062c836107cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610661576106606107e7565b5b828201905092915050565b6000610677826107af565b9150610682836107af565b92508261069257610691610816565b5b828204905092915050565b60006106a8826107cb565b91506106b3836107cb565b9250826106c3576106c2610816565b5b828204905092915050565b60006106d9826107cb565b91506106e4836107cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561071d5761071c6107e7565b5b828202905092915050565b6000610733826107af565b915061073e836107af565b925082821015610751576107506107e7565b5b828203905092915050565b6000610767826107cb565b9150610772836107cb565b925082821015610785576107846107e7565b5b828203905092915050565b60008115159050919050565b60008190506107aa82610874565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107e08261079c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061088557610884610845565b5b50565b610891816107af565b811461089c57600080fd5b50565b6108a8816107cb565b81146108b357600080fd5b5056fea26469706673582212200841e84c01d041a6e3be852fa573681f1c88c76f2563f577f15918671b26b56964736f6c63430008040033";

export class LinearCurve__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LinearCurve> {
    return super.deploy(overrides || {}) as Promise<LinearCurve>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LinearCurve {
    return super.attach(address) as LinearCurve;
  }
  connect(signer: Signer): LinearCurve__factory {
    return super.connect(signer) as LinearCurve__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LinearCurveInterface {
    return new utils.Interface(_abi) as LinearCurveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LinearCurve {
    return new Contract(address, _abi, signerOrProvider) as LinearCurve;
  }
}
