/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SeacowsRouterInterface extends ethers.utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "pairTransferERC20From(address,address,address,uint256,uint8)": FunctionFragment;
    "pairTransferNFTFrom(address,address,address,uint256,uint8)": FunctionFragment;
    "robustSwapERC20ForAnyNFTs(tuple[],uint256,address,uint256)": FunctionFragment;
    "robustSwapERC20ForSpecificNFTs(tuple[],uint256,address,uint256)": FunctionFragment;
    "robustSwapERC20ForSpecificNFTsAndNFTsToToken((tuple[],tuple[],uint256,address,address))": FunctionFragment;
    "robustSwapETHForAnyNFTs(tuple[],address,address,uint256)": FunctionFragment;
    "robustSwapETHForSpecificNFTs(tuple[],address,address,uint256)": FunctionFragment;
    "robustSwapETHForSpecificNFTsAndNFTsToToken((tuple[],tuple[],uint256,address,address))": FunctionFragment;
    "robustSwapNFTsForToken(tuple[],address,uint256)": FunctionFragment;
    "swapERC20ForAnyNFTs(tuple[],uint256,address,uint256)": FunctionFragment;
    "swapERC20ForSpecificNFTs(tuple[],uint256,address,uint256)": FunctionFragment;
    "swapETHForAnyNFTs(tuple[],address,address,uint256)": FunctionFragment;
    "swapETHForSpecificNFTs(tuple[],address,address,uint256)": FunctionFragment;
    "swapNFTsForAnyNFTsThroughERC20((tuple[],tuple[]),uint256,uint256,address,uint256)": FunctionFragment;
    "swapNFTsForAnyNFTsThroughETH((tuple[],tuple[]),uint256,address,address,uint256)": FunctionFragment;
    "swapNFTsForSpecificNFTsThroughERC20((tuple[],tuple[]),uint256,uint256,address,uint256)": FunctionFragment;
    "swapNFTsForSpecificNFTsThroughETH((tuple[],tuple[]),uint256,address,address,uint256)": FunctionFragment;
    "swapNFTsForToken(tuple[],uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairTransferERC20From",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTransferNFTFrom",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapERC20ForAnyNFTs",
    values: [
      {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapERC20ForSpecificNFTs",
    values: [
      {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapERC20ForSpecificNFTsAndNFTsToToken",
    values: [
      {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapETHForAnyNFTs",
    values: [
      {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapETHForSpecificNFTs",
    values: [
      {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapETHForSpecificNFTsAndNFTsToToken",
    values: [
      {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapNFTsForToken",
    values: [
      {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20ForAnyNFTs",
    values: [
      { pair: string; numItems: BigNumberish }[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20ForSpecificNFTs",
    values: [
      {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForAnyNFTs",
    values: [
      { pair: string; numItems: BigNumberish }[],
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForSpecificNFTs",
    values: [
      {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForAnyNFTsThroughERC20",
    values: [
      {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForAnyNFTsThroughETH",
    values: [
      {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForSpecificNFTsThroughERC20",
    values: [
      {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForSpecificNFTsThroughETH",
    values: [
      {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForToken",
    values: [
      {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairTransferERC20From",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTransferNFTFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapERC20ForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapERC20ForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapERC20ForSpecificNFTsAndNFTsToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapETHForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapETHForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapETHForSpecificNFTsAndNFTsToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapNFTsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20ForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20ForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForAnyNFTsThroughERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForAnyNFTsThroughETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForSpecificNFTsThroughERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForSpecificNFTsThroughETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class SeacowsRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeacowsRouterInterface;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    pairTransferERC20From(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      variant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairTransferNFTFrom(
      nft: string,
      from: string,
      to: string,
      id: BigNumberish,
      variant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapERC20ForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapERC20ForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapETHForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapETHForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    robustSwapNFTsForToken(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[],
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapERC20ForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapERC20ForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapETHForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapETHForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForAnyNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForToken(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      minOutput: BigNumberish,
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  pairTransferERC20From(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    variant: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairTransferNFTFrom(
    nft: string,
    from: string,
    to: string,
    id: BigNumberish,
    variant: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapERC20ForAnyNFTs(
    swapList: {
      swapInfo: { pair: string; numItems: BigNumberish };
      maxCost: BigNumberish;
    }[],
    inputAmount: BigNumberish,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapERC20ForSpecificNFTs(
    swapList: {
      swapInfo: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      };
      maxCost: BigNumberish;
    }[],
    inputAmount: BigNumberish,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapERC20ForSpecificNFTsAndNFTsToToken(
    params: {
      tokenToNFTTrades: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[];
      nftToTokenTrades: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[];
      inputAmount: BigNumberish;
      tokenRecipient: string;
      nftRecipient: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapETHForAnyNFTs(
    swapList: {
      swapInfo: { pair: string; numItems: BigNumberish };
      maxCost: BigNumberish;
    }[],
    ethRecipient: string,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapETHForSpecificNFTs(
    swapList: {
      swapInfo: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      };
      maxCost: BigNumberish;
    }[],
    ethRecipient: string,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapETHForSpecificNFTsAndNFTsToToken(
    params: {
      tokenToNFTTrades: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[];
      nftToTokenTrades: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[];
      inputAmount: BigNumberish;
      tokenRecipient: string;
      nftRecipient: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  robustSwapNFTsForToken(
    swapList: {
      swapInfo: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      };
      minOutput: BigNumberish;
    }[],
    tokenRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapERC20ForAnyNFTs(
    swapList: { pair: string; numItems: BigNumberish }[],
    inputAmount: BigNumberish,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapERC20ForSpecificNFTs(
    swapList: {
      pair: string;
      nftIds: BigNumberish[];
      details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
    }[],
    inputAmount: BigNumberish,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapETHForAnyNFTs(
    swapList: { pair: string; numItems: BigNumberish }[],
    ethRecipient: string,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapETHForSpecificNFTs(
    swapList: {
      pair: string;
      nftIds: BigNumberish[];
      details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
    }[],
    ethRecipient: string,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForAnyNFTsThroughERC20(
    trade: {
      nftToTokenTrades: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[];
      tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
    },
    inputAmount: BigNumberish,
    minOutput: BigNumberish,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForAnyNFTsThroughETH(
    trade: {
      nftToTokenTrades: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[];
      tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
    },
    minOutput: BigNumberish,
    ethRecipient: string,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForSpecificNFTsThroughERC20(
    trade: {
      nftToTokenTrades: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[];
      tokenToNFTTrades: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[];
    },
    inputAmount: BigNumberish,
    minOutput: BigNumberish,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForSpecificNFTsThroughETH(
    trade: {
      nftToTokenTrades: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[];
      tokenToNFTTrades: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[];
    },
    minOutput: BigNumberish,
    ethRecipient: string,
    nftRecipient: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForToken(
    swapList: {
      pair: string;
      nftIds: BigNumberish[];
      details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
    }[],
    minOutput: BigNumberish,
    tokenRecipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    pairTransferERC20From(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      variant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pairTransferNFTFrom(
      nft: string,
      from: string,
      to: string,
      id: BigNumberish,
      variant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    robustSwapERC20ForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        remainingValue: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    robustSwapETHForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        remainingValue: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    robustSwapNFTsForToken(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[],
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapERC20ForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapERC20ForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapETHForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapETHForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForToken(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      minOutput: BigNumberish,
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    pairTransferERC20From(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      variant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairTransferNFTFrom(
      nft: string,
      from: string,
      to: string,
      id: BigNumberish,
      variant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapERC20ForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapETHForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    robustSwapNFTsForToken(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[],
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapERC20ForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapERC20ForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapETHForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapETHForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapNFTsForToken(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      minOutput: BigNumberish,
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairTransferERC20From(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      variant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairTransferNFTFrom(
      nft: string,
      from: string,
      to: string,
      id: BigNumberish,
      variant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapERC20ForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapERC20ForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapETHForAnyNFTs(
      swapList: {
        swapInfo: { pair: string; numItems: BigNumberish };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapETHForSpecificNFTs(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        maxCost: BigNumberish;
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: {
        tokenToNFTTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          maxCost: BigNumberish;
        }[];
        nftToTokenTrades: {
          swapInfo: {
            pair: string;
            nftIds: BigNumberish[];
            details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
          };
          minOutput: BigNumberish;
        }[];
        inputAmount: BigNumberish;
        tokenRecipient: string;
        nftRecipient: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapNFTsForToken(
      swapList: {
        swapInfo: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        };
        minOutput: BigNumberish;
      }[],
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20ForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20ForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      inputAmount: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForAnyNFTs(
      swapList: { pair: string; numItems: BigNumberish }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForSpecificNFTs(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForAnyNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: { pair: string; numItems: BigNumberish }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      inputAmount: BigNumberish,
      minOutput: BigNumberish,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: {
        nftToTokenTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
        tokenToNFTTrades: {
          pair: string;
          nftIds: BigNumberish[];
          details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
        }[];
      },
      minOutput: BigNumberish,
      ethRecipient: string,
      nftRecipient: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForToken(
      swapList: {
        pair: string;
        nftIds: BigNumberish[];
        details: { groupId: BigNumberish; merkleProof: BytesLike[] }[];
      }[],
      minOutput: BigNumberish,
      tokenRecipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
