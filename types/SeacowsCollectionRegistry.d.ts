/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SeacowsCollectionRegistryInterface extends ethers.utils.Interface {
  functions: {
    "MerkleProofURI(address,string)": FunctionFragment;
    "admin()": FunctionFragment;
    "allFeeds(uint256)": FunctionFragment;
    "batchUpdateAnswer(address[],uint256[],int256[])": FunctionFragment;
    "createFeed(address,uint256)": FunctionFragment;
    "getAssetPrice(address,uint256,uint256,bytes32[])": FunctionFragment;
    "getFeeds(address,uint256)": FunctionFragment;
    "getGroupPrice(address,uint256)": FunctionFragment;
    "getMerkleProof(address)": FunctionFragment;
    "getMerkleRoot(address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setMerkleRoot(address,bytes32)": FunctionFragment;
    "updateAnswer(address,uint256,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MerkleProofURI",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allFeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateAnswer",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createFeed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleProof",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnswer",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MerkleProofURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroupPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnswer",
    data: BytesLike
  ): Result;

  events: {
    "FeedCreated(address,uint256,address,uint256)": EventFragment;
    "MerkleRootChanged(address,bytes32)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeedCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
}

export type FeedCreatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    collection: string;
    groupId: BigNumber;
    feed: string;
    arg3: BigNumber;
  }
>;

export type MerkleRootChangedEvent = TypedEvent<
  [string, string] & { collection: string; merkleRoot: string }
>;

export type NewAdminEvent = TypedEvent<
  [string, string] & { oldAdmin: string; newAdmin: string }
>;

export class SeacowsCollectionRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeacowsCollectionRegistryInterface;

  functions: {
    MerkleProofURI(
      collection: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allFeeds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    batchUpdateAnswer(
      collection: string[],
      groupId: BigNumberish[],
      _answer: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createFeed(
      collection: string,
      groupId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssetPrice(
      collection: string,
      tokenId: BigNumberish,
      groupId: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGroupPrice(
      collection: string,
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMerkleProof(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      collection: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAnswer(
      collection: string,
      groupId: BigNumberish,
      _answer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MerkleProofURI(
    collection: string,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allFeeds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  batchUpdateAnswer(
    collection: string[],
    groupId: BigNumberish[],
    _answer: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createFeed(
    collection: string,
    groupId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssetPrice(
    collection: string,
    tokenId: BigNumberish,
    groupId: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getGroupPrice(
    collection: string,
    groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMerkleProof(arg0: string, overrides?: CallOverrides): Promise<string>;

  getMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    collection: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAnswer(
    collection: string,
    groupId: BigNumberish,
    _answer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MerkleProofURI(
      collection: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allFeeds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    batchUpdateAnswer(
      collection: string[],
      groupId: BigNumberish[],
      _answer: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createFeed(
      collection: string,
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetPrice(
      collection: string,
      tokenId: BigNumberish,
      groupId: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGroupPrice(
      collection: string,
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleProof(arg0: string, overrides?: CallOverrides): Promise<string>;

    getMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(
      collection: string,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnswer(
      collection: string,
      groupId: BigNumberish,
      _answer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeedCreated(address,uint256,address,uint256)"(
      collection?: string | null,
      groupId?: null,
      feed?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { collection: string; groupId: BigNumber; feed: string; arg3: BigNumber }
    >;

    FeedCreated(
      collection?: string | null,
      groupId?: null,
      feed?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { collection: string; groupId: BigNumber; feed: string; arg3: BigNumber }
    >;

    "MerkleRootChanged(address,bytes32)"(
      collection?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [string, string],
      { collection: string; merkleRoot: string }
    >;

    MerkleRootChanged(
      collection?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [string, string],
      { collection: string; merkleRoot: string }
    >;

    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { oldAdmin: string; newAdmin: string }
    >;

    NewAdmin(
      oldAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { oldAdmin: string; newAdmin: string }
    >;
  };

  estimateGas: {
    MerkleProofURI(
      collection: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allFeeds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    batchUpdateAnswer(
      collection: string[],
      groupId: BigNumberish[],
      _answer: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createFeed(
      collection: string,
      groupId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssetPrice(
      collection: string,
      tokenId: BigNumberish,
      groupId: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupPrice(
      collection: string,
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleProof(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMerkleRoot(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      collection: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAnswer(
      collection: string,
      groupId: BigNumberish,
      _answer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MerkleProofURI(
      collection: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allFeeds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchUpdateAnswer(
      collection: string[],
      groupId: BigNumberish[],
      _answer: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createFeed(
      collection: string,
      groupId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssetPrice(
      collection: string,
      tokenId: BigNumberish,
      groupId: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupPrice(
      collection: string,
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleProof(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRoot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      collection: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAnswer(
      collection: string,
      groupId: BigNumberish,
      _answer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
