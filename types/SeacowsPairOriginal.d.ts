/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SeacowsPairOriginalInterface extends ethers.utils.Interface {
  functions: {
    "assetRecipient()": FunctionFragment;
    "bondingCurve()": FunctionFragment;
    "call(address,bytes)": FunctionFragment;
    "changeAssetRecipient(address)": FunctionFragment;
    "changeDelta(uint128)": FunctionFragment;
    "changeFee(uint96)": FunctionFragment;
    "changeSpotPrice(uint128)": FunctionFragment;
    "delta()": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "getAllHeldIds()": FunctionFragment;
    "getAssetRecipient()": FunctionFragment;
    "getBuyNFTQuote(uint256)": FunctionFragment;
    "getSellNFTQuote(uint256)": FunctionFragment;
    "initialize(address,address,uint128,uint96,uint128)": FunctionFragment;
    "multicall(bytes[],bool)": FunctionFragment;
    "nft()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairVariant()": FunctionFragment;
    "poolType()": FunctionFragment;
    "spotPrice()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapNFTsForToken(uint256[],uint256,address,bool,address)": FunctionFragment;
    "swapTokenForAnyNFTs(uint256,uint256,address,bool,address)": FunctionFragment;
    "swapTokenForSpecificNFTs(uint256[],uint256,address,bool,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawERC1155(address,uint256[],uint256[])": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawERC721(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAssetRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSpotPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delta", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllHeldIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyNFTQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellNFTQuote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairVariant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(functionFragment: "spotPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForToken",
    values: [BigNumberish[], BigNumberish, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForAnyNFTs",
    values: [BigNumberish, BigNumberish, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForSpecificNFTs",
    values: [BigNumberish[], BigNumberish, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAssetRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllHeldIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyNFTQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellNFTQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairVariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spotPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;

  events: {
    "AssetRecipientChange(address)": EventFragment;
    "DeltaUpdate(uint128)": EventFragment;
    "FeeUpdate(uint96)": EventFragment;
    "NFTWithdrawal()": EventFragment;
    "OwnershipTransferred(address)": EventFragment;
    "SpotPriceUpdate(uint128)": EventFragment;
    "SwapNFTInPair()": EventFragment;
    "SwapNFTOutPair()": EventFragment;
    "TokenDeposit(uint256)": EventFragment;
    "TokenWithdrawal(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRecipientChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeltaUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpotPriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapNFTInPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapNFTOutPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawal"): EventFragment;
}

export type AssetRecipientChangeEvent = TypedEvent<[string] & { a: string }>;

export type DeltaUpdateEvent = TypedEvent<
  [BigNumber] & { newDelta: BigNumber }
>;

export type FeeUpdateEvent = TypedEvent<[BigNumber] & { newFee: BigNumber }>;

export type NFTWithdrawalEvent = TypedEvent<[] & {}>;

export type OwnershipTransferredEvent = TypedEvent<
  [string] & { newOwner: string }
>;

export type SpotPriceUpdateEvent = TypedEvent<
  [BigNumber] & { newSpotPrice: BigNumber }
>;

export type SwapNFTInPairEvent = TypedEvent<[] & {}>;

export type SwapNFTOutPairEvent = TypedEvent<[] & {}>;

export type TokenDepositEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type TokenWithdrawalEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export class SeacowsPairOriginal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeacowsPairOriginalInterface;

  functions: {
    assetRecipient(overrides?: CallOverrides): Promise<[string]>;

    bondingCurve(
      overrides?: CallOverrides
    ): Promise<[string] & { _bondingCurve: string }>;

    call(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAssetRecipient(
      newRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDelta(
      newDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSpotPrice(
      newSpotPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delta(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(
      overrides?: CallOverrides
    ): Promise<[string] & { _factory: string }>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllHeldIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAssetRecipient(
      overrides?: CallOverrides
    ): Promise<[string] & { _assetRecipient: string }>;

    getBuyNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        inputAmount: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    getSellNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        outputAmount: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    initialize(
      _owner: string,
      _assetRecipient: string,
      _delta: BigNumberish,
      _fee: BigNumberish,
      _spotPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string] & { _nft: string }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairVariant(overrides?: CallOverrides): Promise<[number]>;

    poolType(
      overrides?: CallOverrides
    ): Promise<[number] & { _poolType: number }>;

    spotPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapNFTsForToken(
      nftIds: BigNumberish[],
      minExpectedTokenOutput: BigNumberish,
      tokenRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenForAnyNFTs(
      numNFTs: BigNumberish,
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenForSpecificNFTs(
      nftIds: BigNumberish[],
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      a: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      a: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      a: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetRecipient(overrides?: CallOverrides): Promise<string>;

  bondingCurve(overrides?: CallOverrides): Promise<string>;

  call(
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAssetRecipient(
    newRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDelta(
    newDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSpotPrice(
    newSpotPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delta(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getAllHeldIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAssetRecipient(overrides?: CallOverrides): Promise<string>;

  getBuyNFTQuote(
    numNFTs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      error: number;
      newSpotPrice: BigNumber;
      newDelta: BigNumber;
      inputAmount: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  getSellNFTQuote(
    numNFTs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      error: number;
      newSpotPrice: BigNumber;
      newDelta: BigNumber;
      outputAmount: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  initialize(
    _owner: string,
    _assetRecipient: string,
    _delta: BigNumberish,
    _fee: BigNumberish,
    _spotPrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairVariant(overrides?: CallOverrides): Promise<number>;

  poolType(overrides?: CallOverrides): Promise<number>;

  spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapNFTsForToken(
    nftIds: BigNumberish[],
    minExpectedTokenOutput: BigNumberish,
    tokenRecipient: string,
    isRouter: boolean,
    routerCaller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenForAnyNFTs(
    numNFTs: BigNumberish,
    maxExpectedTokenInput: BigNumberish,
    nftRecipient: string,
    isRouter: boolean,
    routerCaller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenForSpecificNFTs(
    nftIds: BigNumberish[],
    maxExpectedTokenInput: BigNumberish,
    nftRecipient: string,
    isRouter: boolean,
    routerCaller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    a: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    a: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    a: string,
    nftIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetRecipient(overrides?: CallOverrides): Promise<string>;

    bondingCurve(overrides?: CallOverrides): Promise<string>;

    call(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAssetRecipient(
      newRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDelta(
      newDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeSpotPrice(
      newSpotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delta(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllHeldIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAssetRecipient(overrides?: CallOverrides): Promise<string>;

    getBuyNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        inputAmount: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    getSellNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        outputAmount: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    initialize(
      _owner: string,
      _assetRecipient: string,
      _delta: BigNumberish,
      _fee: BigNumberish,
      _spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairVariant(overrides?: CallOverrides): Promise<number>;

    poolType(overrides?: CallOverrides): Promise<number>;

    spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapNFTsForToken(
      nftIds: BigNumberish[],
      minExpectedTokenOutput: BigNumberish,
      tokenRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenForAnyNFTs(
      numNFTs: BigNumberish,
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenForSpecificNFTs(
      nftIds: BigNumberish[],
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      a: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      a: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      a: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetRecipientChange(address)"(
      a?: null
    ): TypedEventFilter<[string], { a: string }>;

    AssetRecipientChange(a?: null): TypedEventFilter<[string], { a: string }>;

    "DeltaUpdate(uint128)"(
      newDelta?: null
    ): TypedEventFilter<[BigNumber], { newDelta: BigNumber }>;

    DeltaUpdate(
      newDelta?: null
    ): TypedEventFilter<[BigNumber], { newDelta: BigNumber }>;

    "FeeUpdate(uint96)"(
      newFee?: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    FeeUpdate(
      newFee?: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    "NFTWithdrawal()"(): TypedEventFilter<[], {}>;

    NFTWithdrawal(): TypedEventFilter<[], {}>;

    "OwnershipTransferred(address)"(
      newOwner?: string | null
    ): TypedEventFilter<[string], { newOwner: string }>;

    OwnershipTransferred(
      newOwner?: string | null
    ): TypedEventFilter<[string], { newOwner: string }>;

    "SpotPriceUpdate(uint128)"(
      newSpotPrice?: null
    ): TypedEventFilter<[BigNumber], { newSpotPrice: BigNumber }>;

    SpotPriceUpdate(
      newSpotPrice?: null
    ): TypedEventFilter<[BigNumber], { newSpotPrice: BigNumber }>;

    "SwapNFTInPair()"(): TypedEventFilter<[], {}>;

    SwapNFTInPair(): TypedEventFilter<[], {}>;

    "SwapNFTOutPair()"(): TypedEventFilter<[], {}>;

    SwapNFTOutPair(): TypedEventFilter<[], {}>;

    "TokenDeposit(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    TokenDeposit(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "TokenWithdrawal(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    TokenWithdrawal(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    assetRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    call(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAssetRecipient(
      newRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDelta(
      newDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSpotPrice(
      newSpotPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delta(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllHeldIds(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _assetRecipient: string,
      _delta: BigNumberish,
      _fee: BigNumberish,
      _spotPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairVariant(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForToken(
      nftIds: BigNumberish[],
      minExpectedTokenOutput: BigNumberish,
      tokenRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenForAnyNFTs(
      numNFTs: BigNumberish,
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenForSpecificNFTs(
      nftIds: BigNumberish[],
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      a: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      a: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      a: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    call(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAssetRecipient(
      newRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDelta(
      newDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSpotPrice(
      newSpotPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllHeldIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellNFTQuote(
      numNFTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _assetRecipient: string,
      _delta: BigNumberish,
      _fee: BigNumberish,
      _spotPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairVariant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapNFTsForToken(
      nftIds: BigNumberish[],
      minExpectedTokenOutput: BigNumberish,
      tokenRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenForAnyNFTs(
      numNFTs: BigNumberish,
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenForSpecificNFTs(
      nftIds: BigNumberish[],
      maxExpectedTokenInput: BigNumberish,
      nftRecipient: string,
      isRouter: boolean,
      routerCaller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      a: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      a: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      a: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
